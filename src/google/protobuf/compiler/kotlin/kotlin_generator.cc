// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: Richard Fussenegger <fleshgrinder@users.noreply.github.com>

#include <google/protobuf/compiler/kotlin/kotlin_generator.h>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/compiler/kotlin/kotlin_options.h>
#include <google/protobuf/compiler/kotlin/kotlin_utils.h>
#include <google/protobuf/io/printer.h>

namespace google {
namespace protobuf {
namespace compiler {
namespace kotlin {

KotlinGenerator::KotlinGenerator() = default;
KotlinGenerator::~KotlinGenerator() = default;

bool KotlinGenerator::Generate(
    const FileDescriptor *file,
    const std::string &parameter,
    GeneratorContext *context,
    std::string *error
) const {
  // region options ------------------------------------------------------------
  std::vector<std::pair<string, string>> options;
  ParseGeneratorParameter(parameter, &options);
  KotlinOptions kotlin_options;

  for (const auto &option : options) {
    if (option.first == "package_prefix") {
      kotlin_options.package_prefix = option.second;
      if (option.second[option.second.length() - 1] != '.') {
        kotlin_options.package_prefix += '.';
      }
    } else {
      *error = "Unknown generator option: " + option.first;
      return false;
    }
  }
  // endregion options ---------------------------------------------------------

  if (file->syntax() != FileDescriptor::SYNTAX_PROTO2 && file->syntax() != FileDescriptor::SYNTAX_PROTO3) {
    *error = "Invalid or unsupported Protobuf syntax.";
    return false;
  }

  const auto &file_options = file->options();
  const auto package = GetKotlinPackage(file);
  const auto dir = KotlinPackageToDir(package);

  for (int i = 0; i < file->message_type_count(); i++) {
    const auto &message = file->message_type(i);
    const auto &message_options = message->options();

    std::unique_ptr<io::ZeroCopyOutputStream> output(context->Open(dir + message->name() + ".kt"));
    io::Printer printer(output.get(), '$');
    printer.Print("// Generated by the protocol buffer compiler. DO NOT EDIT!\n\n");

    if (!package.empty()) {
      printer.Print(
          "package $prefix$$package$\n\n",
          "prefix", kotlin_options.package_prefix,
          "package", package
      );
    }

    printer.Print("@javax.annotation.Generated(\"protoc\")\n");

    if (file_options.deprecated() || message_options.deprecated()) {
      // TODO(Fleshgrinder) get deprecation message from option comment
      printer.Print("@Deprecated(\"Deprecated in Protobuf\")\n");
    }

    printer.Print("data class $name$(\n", "name", message->name());

    for (int j = 0; j < message->field_count(); j++) {
      if (j != 0) {
        printer.Print(",\n");
      }
      auto field = message->field(j);
      printer.Print(
          "    val $name$: $type$ = $default_value$",
          "name", field->camelcase_name(),
          "type", KotlinTypeName(field),
          "default_value", KotlinDefaultValue(field)
      );
    }
    printer.Print("    val unknownFields: Map<Int, ")
    printer.Print("\n) {\n");

    // We always include a companion object to ensure that users can add static
    // extension functions to the generated classes.
    printer.Print("\n    companion object\n");

    printer.Print("}\n");
  }

  return true;
}

}  // namespace kotlin
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
